/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/camps': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 合宿の一覧を取得 */
    get: operations['getCamps']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 合宿を作成（管理者用） */
    post: operations['adminPostCamp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/register': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 合宿に参加登録 */
    post: operations['postCampRegister']
    /** 合宿の参加登録を解除 */
    delete: operations['deleteCampRegister']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 合宿を更新（管理者用） */
    put: operations['adminPutCamp']
    post?: never
    /** 合宿を削除（管理者用） */
    delete: operations['adminDeleteCamp']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/participants': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 合宿の参加者一覧を取得 */
    get: operations['getCampParticipants']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** イベントの一覧を取得 */
    get: operations['getEvents']
    put?: never
    /** イベントを作成 */
    post: operations['postEvent']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/events/{eventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** イベントを更新 */
    put: operations['putEvent']
    post?: never
    /** イベントを削除 */
    delete: operations['deleteEvent']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 自分の情報を取得 */
    get: operations['getMe']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 自分の合宿参加情報を取得 */
    get: operations['getDashboard']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/staffs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 合宿係の一覧を取得 */
    get: operations['getStaffs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/users/{userId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** ユーザー情報を取得（管理者用） */
    get: operations['adminGetUser']
    /** ユーザーの情報を更新（主に合宿係の権限管理用） */
    put: operations['adminPutUser']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/users/{userId}/messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** ユーザーにDMを送信（管理者用） */
    post: operations['adminPostMessage']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/question-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 質問グループの一覧を取得 */
    get: operations['getQuestionGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}/question-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 質問グループを作成（管理者用）
     * @description 質問グループを作成します。グループに属する質問や、その選択肢も同時に作成できます。
     */
    post: operations['adminPostQuestionGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/question-groups/{questionGroupId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 質問グループを更新（管理者用）
     * @description 質問グループを更新します。グループに属する質問は編集できません。
     */
    put: operations['adminPutQuestionGroupMetadata']
    post?: never
    /** 質問グループを削除（管理者用） */
    delete: operations['adminDeleteQuestionGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/question-groups/{questionGroupId}/questions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 質問を追加 */
    post: operations['adminPostQuestion']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/questions/{questionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 質問を更新（管理者用） */
    put: operations['adminPutQuestion']
    post?: never
    /** 質問を削除（管理者用） */
    delete: operations['adminDeleteQuestion']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/questions/{questionId}/answers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 質問の回答を取得（管理者用） */
    get: operations['adminGetAnswers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/questions/{questionId}/answers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 質問の回答一覧を取得 */
    get: operations['getAnswers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/me/question-groups/{questionGroupId}/answers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** ある質問グループに対する自分の回答を取得 */
    get: operations['getMyAnswers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/question-groups/{questionGroupId}/answers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 質問に回答する
     * @description 質問グループに対する回答を作成します。複数の質問に対する回答を一度に送信できます。
     */
    post: operations['postAnswers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/answers/{answerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 自分の回答を更新 */
    put: operations['putAnswer']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/answers/{answerId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 管理者が回答を更新 */
    put: operations['adminPutAnswer']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}/payments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 支払い情報の一覧を取得（管理者用） */
    get: operations['adminGetPayments']
    put?: never
    /** 支払い情報を作成（管理者用） */
    post: operations['adminPostPayment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/payments/{paymentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 支払い情報を更新（管理者用） */
    put: operations['adminPutPayment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/room-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 部屋グループの一覧を取得 */
    get: operations['getRoomGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}/room-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 部屋グループを作成（管理者用） */
    post: operations['adminPostRoomGroup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/room-groups/{roomGroupId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 部屋グループを更新（管理者用） */
    put: operations['adminPutRoomGroup']
    post?: never
    /** 部屋グループを削除（管理者用） */
    delete: operations['adminDeleteRoomGroup']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/rooms': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 部屋を作成（管理者用） */
    post: operations['adminPostRoom']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/rooms/{roomId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 部屋を更新（管理者用） */
    put: operations['adminPutRoom']
    post?: never
    /** 部屋を削除（管理者用） */
    delete: operations['adminDeleteRoom']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/images': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 画像の一覧を取得 */
    get: operations['getImages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}/images': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 画像をアップロード（管理者用） */
    post: operations['adminPostImage']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/images/{imageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 画像を取得 */
    get: operations['getImage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/images/{imageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** 画像を更新（管理者用） */
    put: operations['adminPutImage']
    post?: never
    /** 画像を削除（管理者用） */
    delete: operations['adminDeleteImage']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/camps/{campId}/roll-calls': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 点呼の一覧を取得 */
    get: operations['getRollCalls']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/admin/camps/{campId}/roll-calls': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 点呼を作成（管理者用） */
    post: operations['adminPostRollCall']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/roll-calls/{rollCallId}/reactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 点呼のリアクション一覧を取得 */
    get: operations['getRollCallReactions']
    put?: never
    /** 点呼にリアクションを追加 */
    post: operations['postRollCallReaction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/roll-calls/{rollCallId}/reactions/stream': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 新たに作成されたリアクションをストリームで取得 */
    get: operations['streamRollCallReactions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/reactions/{reactionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** リアクションを更新 */
    put: operations['putReaction']
    post?: never
    /** リアクションを削除 */
    delete: operations['deleteReaction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    CampRequest: {
      displayId: string
      name: string
      /** @description 合宿のしおり（Markdown形式） */
      guidebook: string
      isDraft: boolean
      isRegistrationOpen: boolean
      isPaymentOpen: boolean
      /** Format: date */
      dateStart: string
      /** Format: date */
      dateEnd: string
    }
    CampResponse: {
      id: number
      displayId: string
      name: string
      /** @description 合宿のしおり（Markdown形式） */
      guidebook: string
      isDraft: boolean
      isRegistrationOpen: boolean
      isPaymentOpen: boolean
      /** Format: date */
      dateStart: string
      /** Format: date */
      dateEnd: string
    }
    EventRequest:
      | components['schemas']['DurationEventRequest']
      | components['schemas']['OfficialEventRequest']
      | components['schemas']['MomentEventRequest']
    EventResponse:
      | components['schemas']['DurationEventResponse']
      | components['schemas']['OfficialEventResponse']
      | components['schemas']['MomentEventResponse']
    DurationEventRequest: {
      /** @enum {string} */
      type: 'duration'
      name: string
      description: string
      location: string
      /** Format: date-time */
      timeStart: string
      /** Format: date-time */
      timeEnd: string
      organizerId: string
      /** @enum {string} */
      displayColor: 'orange' | 'green' | 'red' | 'blue' | 'purple' | 'pink'
    }
    DurationEventResponse: {
      id: number
      /** @enum {string} */
      type: 'duration'
      name: string
      description: string
      location: string
      /** Format: date-time */
      timeStart: string
      /** Format: date-time */
      timeEnd: string
      organizerId: string
      /** @enum {string} */
      displayColor: 'orange' | 'green' | 'red' | 'blue' | 'purple' | 'pink'
    }
    OfficialEventRequest: {
      /** @enum {string} */
      type: 'official'
      name: string
      description: string
      location: string
      /** Format: date-time */
      timeStart: string
      /** Format: date-time */
      timeEnd: string
    }
    OfficialEventResponse: {
      id: number
      /** @enum {string} */
      type: 'official'
      name: string
      description: string
      location: string
      /** Format: date-time */
      timeStart: string
      /** Format: date-time */
      timeEnd: string
    }
    MomentEventRequest: {
      /** @enum {string} */
      type: 'moment'
      name: string
      description: string
      location: string
      /** Format: date-time */
      time: string
    }
    MomentEventResponse: {
      id: number
      /** @enum {string} */
      type: 'moment'
      name: string
      description: string
      location: string
      /** Format: date-time */
      time: string
    }
    UserRequest: {
      isStaff: boolean
    }
    UserResponse: {
      id: string
      isStaff: boolean
    }
    DashboardResponse: {
      id: string
      payment?: components['schemas']['PaymentResponse']
      room?: components['schemas']['RoomResponse']
    }
    MessageRequest: {
      content: string
      /** Format: date-time */
      sendAt: string
    }
    PutQuestionGroupRequest: {
      name: string
      description?: string
      /** Format: date */
      due: string
    }
    PostQuestionGroupRequest: components['schemas']['PutQuestionGroupRequest'] & {
      questions: components['schemas']['PostQuestionRequest'][]
    }
    QuestionGroupResponse: components['schemas']['PutQuestionGroupRequest'] & {
      id: number
      questions: components['schemas']['QuestionResponse'][]
    }
    QuestionRequestBase: {
      title: string
      description?: string
      isPublic: boolean
      isOpen: boolean
    }
    PostQuestionRequest:
      | components['schemas']['FreeTextQuestionRequest']
      | components['schemas']['FreeNumberQuestionRequest']
      | components['schemas']['PostSingleChoiceQuestionRequest']
      | components['schemas']['PostMultipleChoiceQuestionRequest']
    PutQuestionRequest:
      | components['schemas']['FreeTextQuestionRequest']
      | components['schemas']['FreeNumberQuestionRequest']
      | components['schemas']['PutSingleChoiceQuestionRequest']
      | components['schemas']['PutMultipleChoiceQuestionRequest']
    QuestionResponse:
      | components['schemas']['FreeTextQuestionResponse']
      | components['schemas']['FreeNumberQuestionResponse']
      | components['schemas']['SingleChoiceQuestionResponse']
      | components['schemas']['MultipleChoiceQuestionResponse']
    FreeTextQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'free_text'
    }
    FreeTextQuestionResponse: {
      id: number
      title: string
      description?: string
      /** @enum {string} */
      type: 'free_text'
      isPublic: boolean
      isOpen: boolean
    }
    FreeNumberQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'free_number'
    }
    FreeNumberQuestionResponse: {
      id: number
      title: string
      description?: string
      /** @enum {string} */
      type: 'free_number'
      isPublic: boolean
      isOpen: boolean
    }
    PostSingleChoiceQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'single'
      options: components['schemas']['PostOptionRequest'][]
    }
    PutSingleChoiceQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'single'
      options: components['schemas']['PutOptionRequest'][]
    }
    SingleChoiceQuestionResponse: {
      id: number
      title: string
      description?: string
      /** @enum {string} */
      type: 'single'
      isPublic: boolean
      isOpen: boolean
      options: components['schemas']['OptionResponse'][]
    }
    PostMultipleChoiceQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'multiple'
      options: components['schemas']['PostOptionRequest'][]
    }
    PutMultipleChoiceQuestionRequest: components['schemas']['QuestionRequestBase'] & {
      /** @enum {string} */
      type: 'multiple'
      options: components['schemas']['PutOptionRequest'][]
    }
    MultipleChoiceQuestionResponse: {
      id: number
      title: string
      description?: string
      /** @enum {string} */
      type: 'multiple'
      isPublic: boolean
      isOpen: boolean
      options: components['schemas']['OptionResponse'][]
    }
    PostOptionRequest: {
      content: string
    }
    PutOptionRequest: components['schemas']['PostOptionRequest'] & {
      id: number
    }
    OptionResponse: components['schemas']['PostOptionRequest'] & {
      id: number
    }
    AnswerRequest:
      | components['schemas']['FreeTextAnswerRequest']
      | components['schemas']['FreeNumberAnswerRequest']
      | components['schemas']['SingleChoiceAnswerRequest']
      | components['schemas']['MultipleChoiceAnswerRequest']
    AnswerResponse:
      | components['schemas']['FreeTextAnswerResponse']
      | components['schemas']['FreeNumberAnswerResponse']
      | components['schemas']['SingleChoiceAnswerResponse']
      | components['schemas']['MultipleChoiceAnswerResponse']
    FreeTextAnswerRequest: {
      /** @enum {string} */
      type: 'free_text'
      questionId: number
      content: string
    }
    FreeTextAnswerResponse: {
      id: number
      /** @enum {string} */
      type: 'free_text'
      questionId: number
      userId: string
      content: string
    }
    FreeNumberAnswerRequest: {
      /** @enum {string} */
      type: 'free_number'
      questionId: number
      content: number
    }
    FreeNumberAnswerResponse: {
      id: number
      /** @enum {string} */
      type: 'free_number'
      questionId: number
      userId: string
      content: number
    }
    SingleChoiceAnswerRequest: {
      /** @enum {string} */
      type: 'single'
      questionId: number
      optionId: number
    }
    SingleChoiceAnswerResponse: {
      id: number
      /** @enum {string} */
      type: 'single'
      questionId: number
      userId: string
      selectedOption: components['schemas']['OptionResponse']
    }
    MultipleChoiceAnswerRequest: {
      /** @enum {string} */
      type: 'multiple'
      questionId: number
      optionIds: number[]
    }
    MultipleChoiceAnswerResponse: {
      id: number
      /** @enum {string} */
      type: 'multiple'
      questionId: number
      userId: string
      selectedOptions: components['schemas']['OptionResponse'][]
    }
    PaymentRequest: {
      userId: string
      campId: number
      amount: number
      amountPaid: number
    }
    PaymentResponse: {
      id: number
      userId: string
      campId: number
      amount: number
      amountPaid: number
    }
    RoomGroupRequest: {
      name: string
    }
    RoomGroupResponse: {
      id: number
      name: string
      rooms: components['schemas']['RoomResponse'][]
    }
    RoomRequest: {
      name: string
      roomGroupId: number
      memberIds: string[]
    }
    RoomResponse: {
      id: number
      name: string
      members: components['schemas']['UserResponse'][]
    }
    ImageResponse: {
      id: number
    }
    RollCallRequest: {
      name: string
      description: string
      options: string[]
      subjects: string[]
    }
    RollCallResponse: {
      id: number
      name: string
      description: string
      options: string[]
      subjects: string[]
    }
    RollCallReactionRequest: {
      content: string
    }
    RollCallReactionResponse: {
      id: number
      userId: string
      content: string
    }
  }
  responses: {
    /** @description No Content */
    NoContent: {
      headers: {
        [name: string]: unknown
      }
      content?: never
    }
    /** @description Bad Request */
    BadRequest: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          message?: string
        }
      }
    }
    /** @description Forbidden */
    Forbidden: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          message?: string
        }
      }
    }
    /** @description Not Found */
    NotFound: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          message?: string
        }
      }
    }
    /** @description Conflict */
    Conflict: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          message?: string
        }
      }
    }
    /** @description Internal Server Error */
    InternalServerError: {
      headers: {
        [name: string]: unknown
      }
      content: {
        'application/json': {
          /** @example Internal server error */
          message?: string
        }
      }
    }
  }
  parameters: {
    /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
    'X-Forwarded-User': string
    /** @description User ID */
    UserId: string
    /** @description User ID */
    UserIdInQuery: string
    /** @description 合宿ID */
    CampId: number
    /** @description 合宿ID */
    CampIdInQuery: number
    /** @description イベントID */
    EventId: number
    /** @description 質問グループのID */
    QuestionGroupId: number
    /** @description 質問ID */
    QuestionId: number
    /** @description 選択肢ID */
    OptionId: number
    /** @description 回答ID */
    AnswerId: number
    /** @description 支払いID */
    PaymentId: number
    /** @description 部屋グループID */
    RoomGroupId: number
    /** @description 部屋ID */
    RoomId: number
    /** @description 画像ID */
    ImageId: number
    /** @description 点呼ID */
    RollCallId: number
    /** @description リアクションID */
    ReactionId: number
  }
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getCamps: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CampResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminPostCamp: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CampRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CampResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      409: components['responses']['Conflict']
      500: components['responses']['InternalServerError']
    }
  }
  postCampRegister: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  deleteCampRegister: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutCamp: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CampRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CampResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteCamp: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getCampParticipants: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  getEvents: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  postEvent: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventResponse']
        }
      }
      400: components['responses']['BadRequest']
      500: components['responses']['InternalServerError']
    }
  }
  putEvent: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description イベントID */
        eventId: components['parameters']['EventId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  deleteEvent: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description イベントID */
        eventId: components['parameters']['EventId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getMe: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  getDashboard: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DashboardResponse']
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getStaffs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminGetUser: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description User ID */
        userId: components['parameters']['UserId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutUser: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description User ID */
        userId: components['parameters']['UserId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPostMessage: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description User ID */
        userId: components['parameters']['UserId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageRequest']
      }
    }
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getQuestionGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionGroupResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminPostQuestionGroup: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostQuestionGroupRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionGroupResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutQuestionGroupMetadata: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問グループのID */
        questionGroupId: components['parameters']['QuestionGroupId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PutQuestionGroupRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionGroupResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteQuestionGroup: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問グループのID */
        questionGroupId: components['parameters']['QuestionGroupId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPostQuestion: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問グループのID */
        questionGroupId: components['parameters']['QuestionGroupId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PostQuestionRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutQuestion: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問ID */
        questionId: components['parameters']['QuestionId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PutQuestionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteQuestion: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問ID */
        questionId: components['parameters']['QuestionId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminGetAnswers: {
    parameters: {
      query?: {
        /** @description User ID */
        userId?: components['parameters']['UserIdInQuery']
      }
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問ID */
        questionId: components['parameters']['QuestionId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse'][]
        }
      }
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  getAnswers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 質問ID */
        questionId: components['parameters']['QuestionId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse'][]
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getMyAnswers: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問グループのID */
        questionGroupId: components['parameters']['QuestionGroupId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse'][]
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  postAnswers: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 質問グループのID */
        questionGroupId: components['parameters']['QuestionGroupId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerRequest'][]
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse'][]
        }
      }
      400: components['responses']['BadRequest']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  putAnswer: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 回答ID */
        answerId: components['parameters']['AnswerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutAnswer: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 回答ID */
        answerId: components['parameters']['AnswerId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AnswerRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnswerResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminGetPayments: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaymentResponse'][]
        }
      }
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  adminPostPayment: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutPayment: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 支払いID */
        paymentId: components['parameters']['PaymentId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PaymentRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaymentResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getRoomGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomGroupResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminPostRoomGroup: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomGroupRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomGroupResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutRoomGroup: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 部屋グループID */
        roomGroupId: components['parameters']['RoomGroupId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomGroupRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomGroupResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteRoomGroup: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 部屋グループID */
        roomGroupId: components['parameters']['RoomGroupId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPostRoom: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      409: components['responses']['Conflict']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutRoom: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 部屋ID */
        roomId: components['parameters']['RoomId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RoomRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteRoom: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 部屋ID */
        roomId: components['parameters']['RoomId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getImages: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminPostImage: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          file?: string[]
        }
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageResponse'][]
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  getImage: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 画像ID */
        imageId: components['parameters']['ImageId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'image/*': string
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminPutImage: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 画像ID */
        imageId: components['parameters']['ImageId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          file?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ImageResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  adminDeleteImage: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 画像ID */
        imageId: components['parameters']['ImageId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  getRollCalls: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RollCallResponse'][]
        }
      }
      500: components['responses']['InternalServerError']
    }
  }
  adminPostRollCall: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 合宿ID */
        campId: components['parameters']['CampId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RollCallRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RollCallResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      500: components['responses']['InternalServerError']
    }
  }
  getRollCallReactions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 点呼ID */
        rollCallId: components['parameters']['RollCallId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RollCallReactionResponse'][]
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  postRollCallReaction: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description 点呼ID */
        rollCallId: components['parameters']['RollCallId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RollCallReactionRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RollCallReactionResponse']
        }
      }
      400: components['responses']['BadRequest']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  streamRollCallReactions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 点呼ID */
        rollCallId: components['parameters']['RollCallId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/event-stream': components['schemas']['RollCallReactionResponse']
        }
      }
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  putReaction: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description リアクションID */
        reactionId: components['parameters']['ReactionId']
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RollCallReactionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RollCallReactionResponse']
        }
      }
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
  deleteReaction: {
    parameters: {
      query?: never
      header?: {
        /** @description ログインしているユーザーのtraQ ID（NeoShowcaseが自動で付与） */
        'X-Forwarded-User'?: components['parameters']['X-Forwarded-User']
      }
      path: {
        /** @description リアクションID */
        reactionId: components['parameters']['ReactionId']
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: components['responses']['NoContent']
      400: components['responses']['BadRequest']
      403: components['responses']['Forbidden']
      404: components['responses']['NotFound']
      500: components['responses']['InternalServerError']
    }
  }
}
